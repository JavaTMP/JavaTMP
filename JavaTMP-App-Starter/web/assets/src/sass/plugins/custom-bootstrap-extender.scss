@import "../common/variables.scss";

.bg-body {
    background-color: $body-bg !important;
}
.text-body {
    color: $gray-900 !important;
}

.has-form-control-clear {
    position: relative;
    .form-control-clear {
        pointer-events: initial;  /* or - auto // or -  unset  */
        line-height: $line-height-base;
        padding: $input-padding-y $input-padding-x;
        font-size: $font-size-base;
        pointer-events: auto;
        cursor: pointer;
        position: absolute;
        right: 0;
        top: 0;

    }
}
::-ms-clear {
    display: none;
}

[dir=rtl] {
    .has-form-control-clear {
        .form-control-clear {
            right: auto;
            left: 0;
        }
    }
}

.logo-image {
    width: 2.5rem;
    height: 2.5rem;
}

.line-height-base {
    line-height: $line-height-base
}
.line-height-1 {
    line-height: 1;
}

// Bootstrap Table Extender:
table.responsive {
    table-layout: fixed;
    td, th {
        white-space: normal !important;
        word-wrap: break-word;
    }
}

.font-size-15 {
    font-size: 1.5rem;
}

// generate darken main theme color:
@each $color, $value in $theme-colors {
    /*@include bg-variant(".bg-#{$color}-darken-10", darken($value, 10));*/
    .bg-#{$color}-darker-5 {
        background-color: darken($value, 5) !important;
    }
    .bg-#{$color}-darker-10 {
        background-color: darken($value, 10) !important;
    }
    .bg-#{$color}-darker-15 {
        background-color: darken($value, 15) !important;
    }
    .bg-#{$color}-darker-20 {
        background-color: darken($value, 20) !important;
    }
    .bg-#{$color}-darker-25 {
        background-color: darken($value, 25) !important;
    }
    .bg-#{$color}-lighter-5 {
        background-color: lighten($value, 5) !important;
    }
    .bg-#{$color}-lighter-10 {
        background-color: lighten($value, 10) !important;
    }
    .bg-#{$color}-lighter-15 {
        background-color: lighten($value, 15) !important;
    }
    .bg-#{$color}-lighter-20 {
        background-color: lighten($value, 20) !important;
    }
    .bg-#{$color}-lighter-25 {
        background-color: lighten($value, 25) !important;
    }
}

.dropdown-item.disabled, .dropdown-item:disabled {
    cursor: not-allowed;
}

.card-placeholder {
    border: $card-border-width dotted $card-border-color;
    border-radius: $card-border-radius;
    padding: 0;
}

.grid-gutter-padding {
    padding-left: $grid-gutter-width / 2;
    padding-right: $grid-gutter-width / 2;
}

$columns: $grid-columns;
$columnSizes: (1, 2, 4, 8, 10, 20, 30, 40, 50, 60, 70, 80);
$breakpoints: $grid-breakpoints;

@mixin make-col-fixed($index, $values: $columnSizes, $breakpointValue : 1) {
    flex: 0 0 nth($values, $index) * 1rem;
    width: nth($values, $index) * 1rem;
}

@each $breakpoint, $breakpointValue in $breakpoints {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @media (min-width: $breakpointValue) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .col-fixed#{$infix} {
            flex: 0 0 $breakpointValue;
            max-width: $breakpointValue;
            width: $breakpointValue;
        }

        @for $i from 1 through $columns {
            .col-fixed#{$infix}-#{$i} {
                @include make-col-fixed($i, $columnSizes, $breakpointValue);
            }
        }
    }
}